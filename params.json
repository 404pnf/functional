{"name":"Functional","body":"### Functional enhancements for ruby.\r\n\r\nSome utils taken from the book \"The Ruby Programming Language 6.8 Functional Programming\"\r\n\r\n\r\n#### Function composition.\r\n    >> sqr = lambda {|x| x * x }\r\n    >> inc = lambda {|x| x + 1 }\r\n    >> (sqr * inc)[5]\r\n    => 36\r\n\r\n#### Function piping.\r\n    >> sqr = lambda {|x| x * x }\r\n    >> inc = lambda {|x| x + 1 }\r\n    >> (sqr | inc)[5]\r\n    => 26\r\n\r\n#### Partial function - first arguments.\r\n    >> pow = lambda {|x, y| x ** y }\r\n    >> (pow >> 10)[2]\r\n    => 100\r\n\r\n#### Partial function - last arguments.\r\n    >> pow = lambda {|x, y| x ** y }\r\n    >> (pow << 10)[2]\r\n    => 1024\r\n\r\n#### Memoize.\r\n    >> fact = +lambda {|n| return 1 if n <= 1; n * fact[n-1]}\r\n    >> fact[10]\r\n    => 3628800\r\n\r\n    >> fib = +lambda {|n| return n if n <= 1; fib[n-1] + fib[n-2] }\r\n    >> fib[100]\r\n    => 354224848179261915075 \r\n\r\n### Working with methods.\r\n\r\nI couldn't think of anything else other than patching the `Symbol` module and overloading `+@`.\r\n\r\n    >> def sqr(x)\r\n    >>   x * x\r\n    >> end\r\n\r\n    >> def inc(x);\r\n    >>   x + 1\r\n    >> end\r\n\r\n    >> (+:sqr | +:inc)[5]\r\n    => 26\r\n\r\nYou can mix methods and lambdas.\r\n\r\n    >> negate = lambda {|x| -x }\r\n    >> (+:sqr | +:inc | negate)[5]\r\n    => -26\r\n","tagline":"Functional enhancements for ruby.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}